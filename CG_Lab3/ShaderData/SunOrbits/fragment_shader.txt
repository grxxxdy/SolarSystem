#version 330 core

in vec3 FragPos;
in vec3 Normal;

out vec4 FragColor;

uniform vec4 colorToSet;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

uniform bool ignoreLights;

void main()
{
    if (ignoreLights) 
    {
        FragColor = colorToSet;
    } 
    else
    {
        // ambient
        vec3 ambient = 0.2 * lightColor;

        // Diffuse
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(lightPos - FragPos);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightColor;

        // Specular
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
        vec3 specular = 0.5 * spec * lightColor;

        // Combined lighting
        vec3 lighting = (ambient + diffuse + specular) * colorToSet.rgb;

        FragColor = vec4(lighting, colorToSet.a);
    }
	
}