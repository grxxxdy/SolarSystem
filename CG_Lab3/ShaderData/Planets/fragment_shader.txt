#version 330 core

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;

out vec4 FragColor;

uniform sampler2D textureToSet;
uniform sampler2D cloudTexture;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

uniform bool isLightSource;
uniform bool hasClouds;

void main()
{
    if (isLightSource) 
    {
        FragColor = texture(textureToSet, TexCoord); 
    } 
    else 
    {
        // ambient
        vec3 ambient = 0.2 * lightColor;

        // Diffuse
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(lightPos - FragPos);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightColor;

        // Specular
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
        vec3 specular = 0.5 * spec * lightColor;

        // Combined lighting
        vec3 lighting = (ambient + diffuse + specular);

        // Base texture
        vec4 baseColor = texture(textureToSet, TexCoord);
        vec4 texColor = baseColor;

        // Clouds
        if (hasClouds) 
        {
            vec4 cloudColor = texture(cloudTexture, TexCoord);
            texColor = mix(baseColor, cloudColor, 0.3 * cloudColor.a);
        }

        FragColor = vec4(lighting, 1.0) * texColor;
    }
}